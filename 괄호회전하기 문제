public class Test02 {
	class Solution {

		public static int solution(String str) {
			HashMap<Character, Character> map = new HashMap<>(); // 괄호의 정보를 저장
			map.put(')', '(');
			map.put('}', '{');
			map.put(']', '[');

			int n = str.length();
			str += str;
			int answer = 0;

			// 확인할 문자열의 시작 인덱스를 0부터 n까지 이동
			A: for (int i = 0; i < n; i++) {
				Stack<Character> stack = new Stack<>();

				// i부터 원본 문자열의 길이인 n까지 올바른 괗호 문자열인지 확인
				for (int j = i; j < i + n; j++) {
					char c = str.charAt(j);

					// 해시맵 안에 해당 키가 없다면 열리는 괄호임
					if (!map.containsKey(c)) {
						stack.push(c);
					} else {
						// 짝이 맞지 않으면 내부 for 문을 종료하고 원래 for문으로 이동
						if (stack.isEmpty() || !stack.pop().equals(map.get(c))) {
							continue A;
						}
					}

				}
				// continue 되지 않고 스택이 비어있으면 올바른 괄호 문자열임
				if (stack.isEmpty()) {
					answer++;
				}
			}

			return answer;

		}

	}

	public static void main(String[] args) {
		System.out.println(Solution.solution("[]()[]"));
		System.out.println(Solution.solution("({})")); 
		System.out.println(Solution.solution("[{()}]")); 
		System.out.println(Solution.solution("([)]")); 
	}

}
